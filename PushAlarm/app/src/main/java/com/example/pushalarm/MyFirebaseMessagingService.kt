package com.example.pushalarm

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService: FirebaseMessagingService() {
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        createNotificationChannel()

        val type = remoteMessage.data["type"]
            ?.let { NotificationType.valueOf(it)}
        val title = remoteMessage.data["title"]
        val message = remoteMessage.data["message"]

        type ?: return


        NotificationManagerCompat.from(this)
            .notify(type.id, createNotification(type, title, message))
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_DEFAULT)
            channel.description = CHANNEL_DESCRIPTION

            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun createNotification(type: NotificationType, title: String?, message: String?): Notification {
        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("notificationType", "${type.title} ÌÉÄÏûÖ")
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)

        }

        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, PendingIntent.FLAG_UPDATE_CURRENT)
        // FLAG_UPDATE_CURRENTÎ•º Ï§åÏúºÎ°úÏç® ÏïåÎ¶ºÏù¥ Ïó¨Îü¨Í∞úÎçîÎùºÎèÑ Í∞ÅÍ∞ÅÏóê ÎßûÎäî ÌéúÎî© Ïù∏ÌÖêÌä∏Í∞Ä ÏàòÌñâÎêòÎèÑÎ°ù Ìï®

        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_baseline_notifications_active_24)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT) // Ïò§Î†àÏò§ Î≤ÑÏ†ÑÏùÑ ÏúÑÌïú Ïö∞ÏÑ†ÏàúÏúÑ
            .setContentIntent(pendingIntent)
            .setAutoCancel(true) // ÌÅ¥Î¶≠Ïãú ÏûêÎèôÏúºÎ°ú ÏïåÎ¶º ÏÇ¨ÎùºÏßÄÍ≤å

        when(type){
            NotificationType.NORMAL -> Unit
            NotificationType.EXPANDABLE -> {
                notificationBuilder.setStyle(NotificationCompat.BigTextStyle()
                    .bigText("üòÄ üòÉ üòÑ üòÅ üòÜ üòÖ üòÇ ü§£ ü•≤ +" +
                            "üòä üòá üôÇ üôÉ üòâ üòå üòç ü•∞ üòò üòó üòô üòö üòã üòõ üòù üòú ü§™ ü§® üßê ü§ì üòé " +
                            "ü§© ü•≥ üòè üòí üòû üòî üòü üòï üôÅ ‚òπÔ∏è üò£ üòñ üò´ üò© ü•∫ üò¢ üò≠ üò§ üò† üò° ü§¨ "+
                            "ü§Ø üò≥ ü•µ ü•∂ üò± üò® üò∞ üò• üòì ü§ó ü§î ü§≠ ü§´ ü§• üò∂ üòê üòë üò¨ üôÑ üòØ üò¶ üòß üòÆ "+
                            "üò≤ ü•± üò¥ ü§§ üò™ üòµ ü§ê ü•¥ ü§¢ ü§Æ ü§ß üò∑ ü§í ü§ï ü§ë ü§† üòà üëø üëπ üë∫ ü§° üí© üëª üíÄ ‚ò†"+
                            "üëΩ üëæ ü§ñ üéÉ üò∫ üò∏ üòπ üòª üòº üòΩ üôÄ üòø üòæ"
                    )
                )
            }
            NotificationType.CUSTOM -> {
                notificationBuilder.setStyle(NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(RemoteViews(packageName, R.layout.view_custon_notification)
                        .apply {
                            setTextViewText(R.id.title, title)
                            setTextViewText(R.id.message, message)
                        }
                    )
            }
        }

        return notificationBuilder.build()
    }

    companion object {
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }
}